group OracleSchema;

// START: file
file(defs) ::= <<
<defs; separator="\n\n\n">
>>
// END: file

// START: type definition
typedef(type, len, precision) ::= "<type><if (len)>(<len><if (precision)>,<precision><endif>)<endif>"
// END: type definition

null() ::= ""

// START: table
table(name, cols, foreignKeys, keys, line) ::= <<
  -- ***********************************************
  -- Table: <name> 
  -- ***********************************************
  -- auto generated by schema generator based on
  -- schema description file at line <line>
  --
  CREATE TABLE <name> (
    <cols; separator=",\n">
      <if (foreignKeys)>,<foreignKeys; separator=",\n"><endif>
      <if (keys)>,<prim_key(table_name=name, columns=keys)><endif>
  );
>>
// END: table



// START: column definitions
column(name, type_def) ::= "<name> <type_def>"
column_named(name, type, len, precision) ::= "<name> <typedef(...)>"
simple_column(name, type) ::= "<name> <type>"
length_column(name, type, len) ::= "<name> <type>(<len>)"
precision_column(name, type, len, precision) ::= "<name> <type>(<len>, <precision>)"
prim_key(table_name, columns) ::= <<constraint pk_<table_name> primary key (<columns; separator=",">)>>
// END: simple column definitions

// START: foreign key constraint
foreign_key_constraint(table_name, link_name, forein_key_cols, refered_table_name, ref_tab_keys) ::= <<
ALTER TABLE <table_name>
  ADD CONSTRAINT fk_<link_name>
  FOREIGN KEY (<foreign_key_cols; separator=",">) REFERENCES <refered_table_name> (<ref_tab_keys; separator=",">);
>>
// END: foreign key constraint


// START: link_definition
link_definition(leftSide, rightSide, linkTableManyToMany, linkTableOneToOne, linkId, leftId, rightId, leftForeignKeys, rightForeignKeys, leftKeys, rightKeys, linkTableCols) ::= <<
  <if(leftSide)><leftSideRef(...)><endif>
  <if(rightSide)><rightSideRef(...)><endif>
  <if(linkTableManyToMany)><linkTableManyToMany(...)><endif>
>>
// END: link_definition

leftSideRef(leftId, linkId, leftForeignKeys, rightId, rightKeys, line) ::= <<
  -- ***********************************************
  -- Link definition: <linkId> 
  -- ***********************************************
  -- auto generated by schema generator based on
  -- schema description file at line <line>
  --
  -- ****************                       *******************
  --  <leftId>       -----------------------  <rightId>
  -- **************** N                   1 *******************
  --                 
ALTER TABLE <leftId> ADD CONSTRAINT fk_<linkId>
  FOREIGN KEY (<leftForeignKeys; separator=",">)
  REFERENCES <rightId> (<rightKeys; separator=",">);
>>

rightSideRef(rightId, linkId, rightForeignKeys, leftId, leftKeys, line) ::= <<
  -- ***********************************************
  -- Link definition: <linkId> 
  -- ***********************************************
  -- auto generated by schema generator based on
  -- schema description file at line <line>
  --
  -- ****************                       *******************
  --  <leftId>       -----------------------  <rightId>
  -- **************** 1                   N *******************
  --                 
ALTER TABLE <rightId> ADD CONSTRAINT fk_<linkId>
  FOREIGN KEY (<rightForeignKeys; separator=",">)
  REFERENCES <leftId> (<leftKeys; separator=",">);
>>

linkTableManyToMany(linkId, linkTableCols, leftKeys, rightKeys, line) ::= <<
  -- ***********************************************
  -- Link definition: <linkId> (n:m)
  -- ***********************************************
  -- auto generated by schema generator based on
  -- schema description file at line <line>
  --
CREATE TABLE <linkId> (
    <linkTableCols; separator=",\n">
    , constraint pk_<linkId> primary key (<leftKeys; separator=",">,<rightKeys; separator=",">)
);

ALTER TABLE <linkId>
  ADD CONSTRAINT fk_<linkId>_<leftId> FOREIGN KEY (<leftKeys; separator=",">)
  REFERENCES <leftId> (<leftKeys; separator=",">);
  
ALTER TABLE <linkId>
  ADD CONSTRAINT fk_<linkId>_<rightId> FOREIGN KEY (<rightKeys; separator=",">)
  REFERENCES <rightId> (<rightKeys; separator=",">);
>>